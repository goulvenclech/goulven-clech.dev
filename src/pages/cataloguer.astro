---
import ReturnHome from "$components/controls/ReturnHome.astro"
import Layout from "$layouts/Layout.astro"

/**
 * Catalogue page
 */
const pageTitle = "Cataloguer"
---

<Layout title={pageTitle} description="Private form to submit reviews">
	<section>
		<h1>{pageTitle}</h1>
		<p>
			This is a private form. You are probably looking for the <a href="/catalogue">catalogue</a>.
		</p>
		<p>
			<ReturnHome />
		</p>
		<section>
			<form class="grid grid-cols-2 gap-5">
				<input id="password" name="password" type="password" placeholder="Password" required />
				<input id="date" name="date" type="date" required />
				<select id="source" name="source" required>
					<option value="" disabled selected>Select a source </option>
					<option value="IGDB">üéÆ Video Game (IGDB)</option>
                                        <option value="BGG">üé≤ Board Game (BGG)</option>
					<option value="TMDB_MOVIE">üé¨ Movie (TMDB)</option>
					<option value="TMDB_TV">üì∫ Show (TMDB)</option>
					<option value="SPOTIFY">üíø Album (Spotify)</option>
				</select>
				<select id="rating" name="rating" required class="border-b-[0.1rem] border-dotted">
					<option value="5" selected>üòç loved it</option>
					<option value="4">üòÄ liked it</option>
					<option value="3">üòê meh'd it</option>
					<option value="2">üôÅ disliked it</option>
					<option value="1">üò° hated it</option>
				</select>
				<input id="source-id" name="source_id" type="text" placeholder="Source ID" required />
				<textarea
					id="review"
					name="comment"
					placeholder="Write your review here..."
					class="col-span-2 block h-24 w-full whitespace-normal"
					rows="4"></textarea>
				<fieldset class="col-span-2">
					<legend>I felt...</legend>
					<div class="flex flex-wrap gap-2.5">
						<p>waiting...</p>
					</div>
				</fieldset>
				<button type="submit" class="button col-span-2"> Submit Review </button>
                        </form>
                </section>
       </section>
       <div
               id="focus-modal"
               class="fixed inset-0 z-10 hidden place-items-center bg-black/70"
       >
               <div class="flex max-h-[70vh] flex-col gap-4 rounded bg-white p-4 dark:bg-neutral-900">
                       <div class="relative max-h-[60vh] overflow-hidden">
                               <img id="focus-image" class="block max-h-[60vh]" alt="" />
                               <div
                                       id="focus-rect"
                                       class="pointer-events-none absolute inset-x-0 border-2 border-sky-500"
                                       style="height:40%;top:50%;transform:translateY(-50%);"></div>
                       </div>
                       <input id="focus-range" type="range" min="0" max="100" value="50" />
                       <div class="flex justify-end gap-2">
                               <button type="button" id="focus-cancel">Cancel</button>
                               <button type="button" id="focus-confirm" class="button">Use focus</button>
                       </div>
               </div>
       </div>
       <script>
		import type { Emotion } from "./api/catalogue/emotions"

		// If server-side fetch failed, try to fetch emotions client-side
		async function loadEmotions() {
			if (document.querySelector("fieldset p")) {
				try {
					const response = await fetch("/api/catalogue/emotions")
					if (!response.ok)
						throw new Error(`HTTP ${response.status} ${response.statusText}:  ${response.text()}`)

					const emotions: Emotion[] = await response.json()
					const emotionsContainer = document.querySelector("fieldset div")
					if (emotionsContainer) {
						emotionsContainer.innerHTML = ""

						emotions
							.sort((a, b) => a.name.localeCompare(b.name))
							.forEach((emotion) => {
								const wrapper = document.createElement("label")
								wrapper.innerHTML = `
																	<input type="checkbox" name="emotions" value=${emotion.id} class="hidden" />
																	${emotion.emoji} ${emotion.name}
                                `
								emotionsContainer.appendChild(wrapper)
							})
					}
				} catch (error) {
					console.error("Failed to load emotions client-side:", error)
				}
			}
		}

               document.addEventListener("DOMContentLoaded", loadEmotions)

               async function pickFocus(imgSrc: string, initial: number | null): Promise<number | null> {
                       const modal = document.getElementById("focus-modal") as HTMLDivElement
                       const img = modal.querySelector("#focus-image") as HTMLImageElement
                       const rect = modal.querySelector("#focus-rect") as HTMLDivElement
                       const range = modal.querySelector("#focus-range") as HTMLInputElement
                       const confirm = modal.querySelector("#focus-confirm") as HTMLButtonElement
                       const cancel = modal.querySelector("#focus-cancel") as HTMLButtonElement

                       return new Promise((resolve) => {
                               img.src = imgSrc
                               range.value = String(initial ?? 50)
                               rect.style.top = range.value + "%"

                               function update() {
                                       rect.style.top = range.value + "%"
                               }

                               function onImageClick(event: MouseEvent) {
                                       const bounds = img.getBoundingClientRect()
                                       const y = ((event.clientY - bounds.top) / bounds.height) * 100
                                       range.value = String(Math.round(y))
                                       update()
                               }

                               function clean() {
                                       range.removeEventListener("input", update)
                                       img.removeEventListener("click", onImageClick)
                                       confirm.removeEventListener("click", onConfirm)
                                       cancel.removeEventListener("click", onCancel)
                                       modal.classList.add("hidden")
                               }

                               function onConfirm() {
                                       clean()
                                       resolve(Number(range.value))
                               }

                               function onCancel() {
                                       clean()
                                       resolve(null)
                               }

                               range.addEventListener("input", update)
                               img.addEventListener("click", onImageClick)
                               confirm.addEventListener("click", onConfirm)
                               cancel.addEventListener("click", onCancel)

                               modal.classList.remove("hidden")
                       })
               }

               // Form validation
               const form = document.querySelector("form")
               form?.addEventListener("submit", async (event) => {
                       event.preventDefault() // stay on page

			// Check if the form is valid
			const data = new FormData(form)

			const emotions = [...form.querySelectorAll('input[name="emotions"]:checked')].map((c) =>
				Number((c as HTMLInputElement).value)
			)

			if (emotions.length === 0 || emotions.length > 3) {
				alert("Choose between 1 and 3 emotions")
				return
			}

                        const payload = {
                                password: data.get("password"),
                                date: data.get("date"),
                                source: data.get("source"),
                                source_id: data.get("source_id"),
                                rating: Number(data.get("rating")),
                                emotions,
                                comment: data.get("comment") ?? "",
                        }

                        const imgRes = await fetch("/api/catalogue/image", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                        source: payload.source,
                                        source_id: payload.source_id,
                                }),
                        })

                        if (!imgRes.ok) {
                                alert("Cannot load image for focus selection")
                                return
                        }

                        const { source_img, source_img_focus_y } = await imgRes.json()
                        const focus = await pickFocus(source_img, source_img_focus_y)
                        if (focus === null) return
                        ;(payload as any).focus_y = focus

			try {
				const res = await fetch("/api/catalogue/reviews", {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify(payload),
				})

				if (!res.ok) {
					const { error } = await res.json()
					throw new Error(error ?? "Unknown error")
				}

				alert("Review saved ‚úîÔ∏è")
				form.reset()
			} catch (e) {
				alert(`‚ùå Cannot save review: ${(e as Error).message}`)
			}
		})
	</script>
</Layout>
