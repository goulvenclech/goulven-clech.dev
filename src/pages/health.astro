---
import ReturnHome from "$components/controls/ReturnHome.astro"
import Layout from "../layouts/Layout.astro"

const pageTitle = "My health"
---

<Layout title={pageTitle}>
	<section>
		<h1>{pageTitle}</h1>
		<p>
			Some tools to maintain good habits. I don't want to obsess over my health, but I do want to
			stay healthy enough to fully enjoy life.
		</p>
		<p>
			Based on the strongest scientific literature, there are several habits that can significantly
			improve my health: daily physical activity, regular sleep schedules, a balanced diet,<sup
				>1</sup
			> no tobacco, little to none alcohol,<sup>2</sup> avoiding air pollution,<sup>3</sup> reducing
			UV exposure, up-to-date vaccinations and screenings, quality social relationships, and managing
			stress. Everything else tends to be marginal, marketing scams, or not relevant for me.<side-note
				class="xl:-mt-16"
				>1 — A diverse and mostly plant-based diet, with enough protein, fiber, and healthy fats. I
				don't want to avoid all salty, processed, and sugary foods as long as they stay occasional.
				And I don't believe in strict diets that are hard to maintain, guilt-inducing, and often not
				backed by science.</side-note
			><side-note
				>2 — I don't smoke, but I do drink alcohol occasionally—usually just a glass of wine in
				social settings, or lonkero after sauna.</side-note
			><side-note
				>3 — I currently live in Toulouse, France, which has a good to moderate air quality. But I
				plan to move to Helsinki, Finland, in the near future, which has excellent to good air
				quality.</side-note
			>
		</p>
		<ReturnHome />
	</section>
	<section>
		<h2>Daily tracking</h2>
		<p>
			My daily steps, sleep, and energy levels—tracked with my Galaxy Watch Ultra and Samsung Health
			app. I want to walk at least 9k steps a day, sleep 7 hours or more, and keep my energy above
			75%. Weekly averages are more important than daily values.
		</p>
		<div id="health-container">
			<p>Loading...</p>
		</div>
		<button id="load-more" class="button hidden" type="button">Load previous month</button>
	</section>
	<script>
		import type { Day as ApiDay } from "./api/health/health"
		import { HealthMonth } from "../components/health/HealthMonth"
		import type { Day } from "../components/health/day"

		let loadedMonths: { year: number; month: number }[] = []

		async function loadHealth(monthOffset = 0, append = false) {
			const container = document.getElementById("health-container")
			const loadMoreBtn = document.getElementById("load-more")
			if (!container) return

			if (!append) {
				container.innerHTML = "<p>Loading...</p>"
				loadedMonths = []
			}

			const now = new Date()
			const targetDate = new Date(now.getFullYear(), now.getMonth() - monthOffset, 1)
			const year = targetDate.getFullYear()
			const month = targetDate.getMonth() + 1

			// Avoid loading the same month twice
			if (loadedMonths.some((m) => m.year === year && m.month === month)) return

			try {
				const monthParam = `${year}-${month.toString().padStart(2, "0")}`
				const res = await fetch(`/api/health/health?month=${monthParam}`)
				if (!res.ok) throw new Error(`HTTP ${res.status}`)

				const { days, hasMore } = (await res.json()) as {
					days: ApiDay[]
					hasMore: boolean
				}

				const parsed: Day[] = days.map((d) => ({
					date: new Date(d.date + "T00:00:00"), // Force local timezone
					steps: d.steps,
					sleep: d.sleep,
					energy: d.energy,
				}))

				const monthName = new Date(year, month - 1).toLocaleString("en-US", {
					month: "long",
					year: "numeric",
				})

				// Always create month component, even if no data
				const monthComponent = new HealthMonth().setData({
					month: monthName,
					comment: "",
					days: parsed,
					year: year,
					monthIndex: month - 1,
				})

				if (!append) {
					container.replaceChildren(monthComponent)
				} else {
					container.appendChild(monthComponent)
				}

				loadedMonths.push({ year, month })

				if (loadMoreBtn) {
					loadMoreBtn.classList.toggle("hidden", !hasMore)
				}
			} catch (err) {
				console.error("Failed to load health data:", err)
				if (!append) {
					container.innerHTML = "<p>Failed to load data.</p>"
				}
			}
		}

		function setupLoadMoreButton() {
			const loadMoreBtn = document.getElementById("load-more")
			loadMoreBtn?.addEventListener("click", () => {
				const nextOffset = loadedMonths.length
				loadHealth(nextOffset, true)
			})
		}

		document.addEventListener("DOMContentLoaded", () => {
			loadHealth()
			setupLoadMoreButton()
		})
	</script>
</Layout>
