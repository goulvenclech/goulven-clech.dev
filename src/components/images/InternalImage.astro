---
import { Picture as AstroPicture } from "astro:assets"
import type { Marker } from "./Image.astro" // only for typing, no runtime cost
/**
 * Low-level renderer used by Image.astro.
 * Decides between a plain <img> (for SVG sources) and <AstroPicture>
 * (for local raster files) while wiring zoom, placeholder and marker logic.
 * Do not use directly in content â€“ prefer Image.astro.
 */
interface Props {
	source: any
	alt: string
	goodQualityURL?: { src: string }
	width?: number
	height?: number
	formats?: string[]
	class?: string
	placeholderURL?: string
	markers?: Marker[]
	[key: string]: any
}

const {
	source,
	alt,
	goodQualityURL,
	width,
	height,
	formats,
	class: className = "",
	placeholderURL,
	markers = [],
	...rest
} = Astro.props
---

{
	source.format === "svg" ? (
		<img
			{...rest}
			src={source.src}
			alt={alt}
			{...(goodQualityURL && {
				"data-zoomable": true,
				"data-zoom-src": goodQualityURL.src,
			})}
			width={width}
			height={height}
			class={className}
		/>
	) : (
		<AstroPicture
			{...rest}
			src={source}
			alt={alt}
			{...(goodQualityURL && {
				"data-zoomable": true,
				"data-zoom-src": goodQualityURL.src,
			})}
			data-markers={markers.length > 0 ? JSON.stringify(markers) : undefined}
			{...(width ? { width: width, height: height } : { inferSize: true })}
			formats={formats ?? ["webp"]}
			class={className}
			style={`background-size: cover; background-image: url(${placeholderURL}); image-rendering: auto;`}
			onload="this.style.backgroundSize = null; this.style.backgroundImage = null; this.style.imageRendering = null; this.style.fontSize = null; this.style.color = null; this.removeAttribute('onload');"
		/>
	)
}
