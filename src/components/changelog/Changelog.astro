---
import { getCollection, render } from 'astro:content';
import ChangelogCard from "../changelog/ChangelogCard.astro"
import FigImage from "../images/FigImage.astro"
import oldWebsiteImage from "src/content/changelog/2023/old_website.png"
/**
 * This file is used to generate the changelog section in $pages/about.astro
 * An historic of this blog, from new features to page redesigns.
 * Use the blog and changelog collections to generate a list of entries, sorted by date.
 * It's a bit hacky, but it works.
 */
// get all others changelog entries
const changelogEntriesRaw = await getCollection("changelog")

// Define the structure of a changelog entry
export interface ChangelogEntry {
	type: string
	date: Date
	url?: string
	url_caption?: string
	name: string
	description: string
	render?(): any
}

// Import all changelog entries
const changelogEntries: ChangelogEntry[] = changelogEntriesRaw.map((entry) => ({
		type: entry.data.type,
		date: new Date(entry.data.date),
		url: entry.data.url || undefined,
		url_caption: entry.data.url_caption,
		name: entry.data.name,
		description: entry.data.description,
		render(): any {
			return render(entry)
		},
	}))

// Sort by date, and reduce into array of years, each containing an array of months, each containing an array of entries
const changelogEntriesSorted = changelogEntries.reduce(
	(acc, entry) => {
		// if the year doesn't exist, create an array for it
		const year = entry.date.getFullYear()
		if (!acc[year]) acc[year] = []
		// if the month doesn't exist, create an array for it
		const month = entry.date.getMonth()
		if (!acc[year][month]) acc[year][month] = []
		// push the entry into the correct array
		acc[year][month].push(entry)
		return acc
	},
	{} as Record<number, Record<number, ChangelogEntry[]>>
)
---

<div>
	{
		// Record is not iterable, so we have to convert it to an array
		Object.entries(changelogEntriesSorted)
			// sort by year from most recent to oldest
			.sort(([yearA], [yearB]) => Number(yearB) - Number(yearA))
			// map each year to a div containing the months
			.map(([year, months]) => (
				<div>
					<h3 class="my-5 text-center text-lg font-normal">☙ {year} ❧</h3>
					<ul class="my-5">
						{
							// Record is not iterable, so we have to convert it to an array
							Object.entries(months)
							// sort by month from most recent to oldest
							.sort(([monthA], [monthB]) => Number(monthB) - Number(monthA))
							// map each month to a ul containing the changelog entries
							.map(([month, entries]) => (
								<h4 class="my-5 font-bold text-font-light dark:text-font-dark">
								{new Date(0, Number(month)).toLocaleString("default", { month: "long" })}
								</h4>
								<ul>
									{entries
										// sort by date from most recent to oldest
										.sort((entryA, entryB) => entryB.date.getTime() - entryA.date.getTime())
										.map((entry) => (<ChangelogCard entry={entry} />))
									}
								</ul>
							))
						}
					</ul>
				</div>
			))
	}
	{/* I should find a cleaner way to do this */}
	<div>
		<h3 class="my-5 text-center text-lg font-normal">☙ 2020 ❧</h3>
		<div class="my-5">
			<ChangelogCard
				entry={{
					type: "memory",
					date: new Date(2019),
					name: "Legacy",
					description: "My website was a simple HTML/CSS page presenting myself, with a language selector in JS.",
					url: "https://github.com/goulvenclech/goulven-clech.dev/blob/09f69e58a120875301c0a434823484348ae8b7be/index.html",
					url_caption: "View source code.",
				}}
			/>
			<div class="-mt-1.5">
				<FigImage src={oldWebsiteImage} alt="Screenshot of my old website" />
			</div>
		</div>
	</div>
</div>
