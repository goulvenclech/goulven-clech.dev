---
import { getCollection, render } from "astro:content"
import ChangelogCard from "../changelog/ChangelogCard.astro"
import Gallery from "../images/Gallery.astro"
import Image from "../images/Image.astro"
import oldWebsiteImage from "src/content/changelog/2023/old_website.png"
/**
 * This file is used to generate the changelog section in $pages/about.astro
 * An historic of this website, from new features to page redesigns.
 * It's a bit hacky, but it works.
 */
// get all others changelog entries
const changelogEntriesRaw = await getCollection("changelog")

// Define the structure of a changelog entry
export interface ChangelogEntry {
	type?: string
	date: Date
	url?: string
	url_caption?: string
	name: string
	description: string
	is_deprecated?: boolean
	render?(): any
}

// Import all changelog entries
const changelogEntries: ChangelogEntry[] = changelogEntriesRaw.map((entry) => ({
	type: entry.data.type,
	date: new Date(entry.data.date),
	url: entry.data.url || undefined,
	url_caption: entry.data.url_caption,
	name: entry.data.name,
	description: entry.data.description,
	is_deprecated: entry.data.is_deprecated || false,
	render(): any {
		return render(entry)
	},
}))

// Sort by date, and reduce into array of years, each containing an array of months, each containing an array of entries
const changelogEntriesSorted = changelogEntries.reduce(
	(acc, entry) => {
		// if the year doesn't exist, create an array for it
		const year = entry.date.getFullYear()
		if (!acc[year]) acc[year] = []
		// if the month doesn't exist, create an array for it
		const month = entry.date.getMonth()
		if (!acc[year][month]) acc[year][month] = []
		// push the entry into the correct array
		acc[year][month].push(entry)
		return acc
	},
	{} as Record<number, Record<number, ChangelogEntry[]>>
)

// Sort by date (year → month) and flatten into consecutive months
const changelogMonthsSorted = Object.entries(changelogEntriesSorted)
	// years : desc
	.sort(([a], [b]) => Number(b) - Number(a))
	.flatMap(([year, months]) =>
		Object.entries(months)
			// months : desc
			.sort(([a], [b]) => Number(b) - Number(a))
			.map(([month, entries]) => ({
				year: Number(year),
				month: Number(month),
				entries,
			}))
	)
---

<div>
	{
		changelogMonthsSorted.map(({ year, month, entries }, i) => {
			const prevYear = i > 0 ? changelogMonthsSorted[i - 1].year : null
			const monthName = new Date(0, month).toLocaleString("default", { month: "long" })
			const title = prevYear !== year ? `${monthName} ${year}` : monthName
			return (
				<>
					<h3>{title}</h3>
					<ul class="my-5">
						{entries
							.sort((a, b) => b.date.getTime() - a.date.getTime())
							.map((entry) => (
								<ChangelogCard entry={entry} />
							))}
					</ul>
				</>
			)
		})
	}
	{/* I should find a cleaner way to do this */}
	<div>
		<h3>Before 2020</h3>
		<div class="my-5">
			<ChangelogCard
				entry={{
					type: "memory",
					date: new Date(2019),
					name: "Legacy",
					url: "https://github.com/goulvenclech/goulven-clech.dev/blob/09f69e58a120875301c0a434823484348ae8b7be/index.html",
					url_caption: "Source code.",
					description:
						"My website was a simple <abbr title='Hypertext Markup Language'>HTML</abbr>/<abbr title='Cascading Style Sheets'>CSS</abbr> page presenting myself, with a language selector in <abbr title='JavaScript'>JS</abbr> ☞",
				}}
			/>
			<div class="-mt-1.5">
				<Gallery>
					<Image src={oldWebsiteImage} alt="Screenshot of my old website" />
				</Gallery>
			</div>
		</div>
	</div>
</div>
