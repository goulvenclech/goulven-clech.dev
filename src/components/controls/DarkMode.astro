---
/**
 * DarkMode button and script logic. This button toggles between dark, light and system
 * theme and saves the choice in localStorage. It also changes the button icon to
 * reflect the current theme. An inline script is used to init it at page load.
 * See inline script -> src/layouts/BaseLayout.astro
 * See dark mode by Tailwind CSS -> https://tailwindcss.com/docs/dark-mode
 */
---

<button name="darkMode" class="hover:text-primary dark:hover:text-primary ml-auto"></button>

<script>
	// Get the button element above (can be multiple)
	const buttons = document.getElementsByName("darkMode")
	// And add an event listener to it (if it/they exist)
	buttons?.forEach((button) => {
		button.addEventListener("click", () => {
			// Get the current theme from localStorage
			const theme = localStorage.getItem("color-theme") as Theme
			// And change it to the next one
			changeTheme(theme)
		})
	})

	// Theme can be "dark" or "light" or the browser preference ("system")
	// "System" is the default theme if no preference is set
	type Theme = "dark" | "light" | "system"

	/**
	 * On click, change the theme to the next one (system -> light -> dark -> system)
	 * Save the choice in localStorage and change the button icon to reflect the current theme.
	 * Then apply the theme to the document.
	 * @param theme - What's the current theme?
	 */
	const changeTheme = (theme: Theme) => {
		switch (theme) {
			case "system":
				localStorage.setItem("color-theme", "light")
				if (buttons) changeIcon("light", buttons)
				document.documentElement.classList.remove("dark")
				document.documentElement.setAttribute("data-theme", "light")
				break
			case "light":
				localStorage.setItem("color-theme", "dark")
				if (buttons) changeIcon("dark", buttons)
				document.documentElement.classList.add("dark")
				document.documentElement.setAttribute("data-theme", "dark")
				break
			case "dark":
				localStorage.setItem("color-theme", "system")
				if (buttons) changeIcon("system", buttons)
				if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
					document.documentElement.classList.add("dark")
					document.documentElement.setAttribute("data-theme", "dark")
				} else {
					document.documentElement.classList.remove("dark")
					document.documentElement.setAttribute("data-theme", "light")
				}
				break
			// Should never happen, but just in case fallback as system
			default:
				localStorage.setItem("color-theme", "system")
				if (buttons) changeIcon("system", buttons)
				if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
					document.documentElement.classList.add("dark")
					document.documentElement.setAttribute("data-theme", "dark")
				} else {
					document.documentElement.classList.remove("dark")
					document.documentElement.setAttribute("data-theme", "light")
				}
				break
		}
	}
	/**
	 * Change the button icon to reflect the current theme
	 * @param theme - What's the theme to reflect?
	 */
	const changeIcon = (theme: Theme, buttons: NodeListOf<HTMLElement>) => {
		switch (theme) {
			case "light":
				buttons.forEach((button) => {
					button.innerHTML = "Light theme"
					button.title = "Click for dark theme"
					button.classList.add("theme-light")
					button.classList.remove("theme-system")
				})
				break
			case "system":
				buttons.forEach((button) => {
					button.innerHTML = "System theme"
					button.title = "Click for light theme"
					button.classList.add("theme-system")
					button.classList.remove("theme-dark")
				})
				break
			// Apply for case "dark" or undefined, fallback to dark
			default:
				buttons.forEach((button) => {
					button.innerHTML = "Dark theme"
					button.title = "Click for system theme"
					button.classList.add("theme-dark")
					button.classList.remove("theme-light")
				})
				break
		}
	}

	// At page load, init the button icon to reflect the current theme
	if (buttons) changeIcon((localStorage.getItem("color-theme") as Theme) || "system", buttons)
</script>
<style>
	@reference "$assets/base.css";

	.darkMode::before {
		content: "";
		font-family: "Font Awesome 6 Free";
		font-weight: 900;
		font-size: 0.65rem;
		padding-right: 0.2rem;
		color: inherit;
		display: inline-block;
		@apply not-italic;
	}

	.theme-light::before {
		content: "\f185";
	}

	.theme-dark::before {
		content: "\f186";
	}

	.theme-system::before {
		content: "\f109";
	}
</style>
