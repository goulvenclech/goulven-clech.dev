---
import type { ImageMetadata } from "astro"
import { generatePlaceholder } from "../../imageService"
import InternalImage from "../images/InternalImage.astro"
/**
 * Used to present an something as a card, also a link to that something.
 */
interface Props {
	image?: ImageMetadata | string
	imageDark?: ImageMetadata | string
	imageAlt?: string
	imageFocusY?: number
	to: string
}

const formats = ["webp", "avif"]
const cardImageWidths = [320, 480, 640, 960]
const cardImageSizes = "(max-width: 640px) 100vw, 150px"
const cardImageQuality = 80

const { image, imageDark, imageAlt = "", to, imageFocusY } = Astro.props

// Generate placeholders for images like in Image.astro
let placeholderURL: string | undefined
let placeholderURLDark: string | undefined

if (image && typeof image !== "string" && image.format !== "svg") {
	// Use fsPath if available (for local images), fallback to src
	const imagePath = (image as any).fsPath || image.src
	if (imagePath && typeof imagePath === "string" && !imagePath.startsWith("http")) {
		try {
			placeholderURL = await generatePlaceholder(
				imagePath,
				Math.max(image.width, 600),
				image.height
			)
		} catch (error) {
			// If placeholder generation fails, continue without placeholder
			console.warn("Failed to generate placeholder for image:", imagePath, error)
		}
	}
}

if (imageDark && typeof imageDark !== "string" && imageDark.format !== "svg") {
	// Use fsPath if available (for local images), fallback to src
	const imageDarkPath = (imageDark as any).fsPath || imageDark.src
	if (imageDarkPath && typeof imageDarkPath === "string" && !imageDarkPath.startsWith("http")) {
		try {
			placeholderURLDark = await generatePlaceholder(
				imageDarkPath,
				Math.max(imageDark.width, 600),
				imageDark.height
			)
		} catch (error) {
			// If placeholder generation fails, continue without placeholder
			console.warn("Failed to generate placeholder for dark image:", imageDarkPath, error)
		}
	}
}
---

<a href={to} class="card">
	<div
		class="card-image"
		style={typeof imageFocusY === "number" ? `--image-focus-y: ${imageFocusY}%` : undefined}
	>
		{
			image &&
				(!imageDark ? (
					<InternalImage
						source={image}
						alt={imageAlt}
						formats={formats}
						widths={cardImageWidths}
						sizes={cardImageSizes}
						quality={cardImageQuality}
						placeholderURL={placeholderURL}
					/>
				) : (
					<>
						<InternalImage
							source={image}
							alt={imageAlt}
							formats={formats}
							widths={cardImageWidths}
							sizes={cardImageSizes}
							quality={cardImageQuality}
							class="dark:hidden"
							placeholderURL={placeholderURL}
						/>
						<InternalImage
							source={imageDark}
							alt={imageAlt}
							formats={formats}
							widths={cardImageWidths}
							sizes={cardImageSizes}
							quality={cardImageQuality}
							class="hidden dark:block"
							placeholderURL={placeholderURLDark}
						/>
					</>
				))
		}
	</div>
	<article>
		<slot />
	</article>
</a>
