---
import type { ImageMetadata } from "astro"
import InternalImage from "../images/InternalImage.astro"
import { computeImageFocusYFromFile, computeImageFocusYFromUrl } from "../../image-focus"
/**
 * Used to present an something as a card, also a link to that something.
 */
interface Props {
	image?: ImageMetadata | string
	imageFocusY?: number
	imageDark?: ImageMetadata | string
	imageDarkFocusY?: number
	imageAlt?: string
	to: string
}

const width = 500
const height = 500
const formats = ["webp", "avif"]

const {
	image,
	imageFocusY: imageFocusYProp,
	imageDark,
	imageDarkFocusY: imageDarkFocusYProp,
	imageAlt = "",
	to,
} = Astro.props as Props

let imageFocusY: number | null = imageFocusYProp ?? null
let imageDarkFocusY: number | null = imageDarkFocusYProp ?? null

if (image && imageFocusY === null) {
	if (typeof image === "string") imageFocusY = await computeImageFocusYFromUrl(image)
	else if (typeof image === "object" && "fsPath" in image)
		imageFocusY = await computeImageFocusYFromFile((image as any).fsPath)
}

if (imageDark && imageDarkFocusY === null) {
	if (typeof imageDark === "string") imageDarkFocusY = await computeImageFocusYFromUrl(imageDark)
	else if (typeof imageDark === "object" && "fsPath" in imageDark)
		imageDarkFocusY = await computeImageFocusYFromFile((imageDark as any).fsPath)
}

const imageStyle = imageFocusY !== null ? `--image-focus-y: ${imageFocusY}%` : undefined
const imageDarkStyle =
	imageDarkFocusY !== null ? `--image-focus-y: ${imageDarkFocusY}%` : imageStyle
---

<a href={to} class="card">
	<div class="card-image">
		{
			image &&
				(!imageDark ? (
					<InternalImage
						source={image}
						alt={imageAlt}
						width={width}
						height={height}
						formats={formats}
						style={imageStyle}
					/>
				) : (
					<>
						<InternalImage
							source={image}
							alt={imageAlt}
							width={width}
							height={height}
							formats={formats}
							class="dark:hidden"
							style={imageStyle}
						/>
						<InternalImage
							source={imageDark}
							alt={imageAlt}
							width={width}
							height={height}
							formats={formats}
							class="hidden dark:block"
							style={imageDarkStyle}
						/>
					</>
				))
		}
	</div>
	<article>
		<slot />
	</article>
</a>
