---
// @ts-ignore - Please EleventyFetch type your shit 🙏
import EleventyFetch from "@11ty/eleventy-fetch"
import Block from "./Block.astro"
import { computeImageFocusY } from "../../imageFocus"

/**
 * Used to present a book as a card, also a link to Google Shopping that book.
 * @param {string} isbn - What's this exciting book's ISBN?
 */
interface Props {
	isbn: string
	focusY?: number
}

const { isbn, focusY } = Astro.props

/**
 * Await fetch function, to the Open Library Api
 * TO DO : handle errors !
 */
const userData: any = EleventyFetch(
	`https://openlibrary.org/api/books?bibkeys=ISBN:${isbn}&jscmd=details&format=json`,
	{
		duration: "1d",
		type: "json",
	}
)

// Got what what we needed 💰 See response format ->
// https://openlibrary.org/dev/docs/api/books
const result = await userData

const book = result[`ISBN:${isbn}`]

// Cover URL for the book
const coverUrl = `https://covers.openlibrary.org/b/isbn/${isbn}-L.jpg`

// Compute focus like MapsBlock, with optional manual override
const computedFocus = typeof focusY === "number" ? focusY : await computeImageFocusY(coverUrl)
const imageFocusY: number | undefined =
	typeof computedFocus === "number" ? computedFocus : undefined
---

<Block image={coverUrl} to={book.info_url} imageFocusY={imageFocusY}>
	<h3 id={book.details.title} class="my-0 line-clamp-2 leading-8 text-ellipsis sm:line-clamp-1">
		{book.details.title}
	</h3>
	<ul class="flex flex-col">
		<li>
			By {book.details.authors.map((author: any) => author.name).join(" & ")}
		</li>
		<li>
			{book.details.publishers.join(" & ")} ({new Date(book.details.publish_date).getFullYear()})
		</li>
		<li>
			ISBN: {book.details.isbn_13}
		</li>
	</ul>
</Block>
