---
// @ts-ignore - Please EleventyFetch type your shit 🙏
import EleventyFetch from "@11ty/eleventy-fetch"
import Block from "./Block.astro"

/**
 * Used to present a Google Maps Place as a card, also a link to that place.
 */
interface Props {
	id: string
}

const { id } = Astro.props

/**
 * See docs -> https://developers.google.com/maps/documentation/
 * TO DO : proper error handling 🙂
 */
const place: any = await EleventyFetch(
	`https://places.googleapis.com/v1/places/${id}` +
		`?fields=id,displayName,formattedAddress,regularOpeningHours,photos,rating,` +
		`userRatingCount,googleMapsUri,businessStatus` +
		`&key=${import.meta.env.MAPS_TOKEN}`,
	{
		duration: "1d",
		type: "json",
	}
)

const isClosedPermanent = place.businessStatus === "CLOSED_PERMANENTLY"

const openingHoursDisplay = isClosedPermanent
	? "Permanently closed."
	: place.regularOpeningHours?.periods
		? getClosedDays(place.regularOpeningHours.periods)
		: "No opening hours available."

/**
 * Return a human sentence listing the closed days.
 */
function getClosedDays(periods: any): string {
	if (!Array.isArray(periods)) return "Unknown opening days."
	const openedDays = periods.map((p: any) => p.open?.day).filter((d: number) => d !== undefined)

	const closedDays = [0, 1, 2, 3, 4, 5, 6]
		.filter((d) => !openedDays.includes(d))
		.map(dayOfWeekAsString)
		.join(", ")

	return closedDays === "" ? "Open every day." : `Closed on ${closedDays}.`
}

/**
 * Converts a day index (0 = Sunday) to string.
 */
function dayOfWeekAsString(i: number): string {
	return ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"][i] || ""
}
---

<Block
	image={place.photos?.length
		? `https://places.googleapis.com/v1/${place.photos[0].name}/media` +
			`?maxHeightPx=500&key=${import.meta.env.MAPS_TOKEN}`
		: undefined}
	imageAlt={place.displayName?.text ? `Photo of ${place.displayName.text}` : "Place photo"}
	to={place.googleMapsUri}
>
	<h3 id={place.id} class="my-0 line-clamp-2 leading-8 text-ellipsis sm:line-clamp-1">
		{place.displayName?.text}
	</h3>
	<ul class="flex flex-col">
		<li class="line-clamp-2 text-ellipsis sm:line-clamp-1">
			{place.formattedAddress}
		</li>
		<li class:list={[{ "text-primary": isClosedPermanent }]}>
			{openingHoursDisplay}
		</li>
		<li>
			{[...Array(Math.round(place.rating || 0))].map(() => <i class="fas fa-star text-xs" />)}{" "}
			({place.userRatingCount} reviews)
		</li>
	</ul>
</Block>
