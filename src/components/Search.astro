---
import { getCollection, type CollectionEntry } from "astro:content"
import { formatDate, isEntryPublished } from "src/utils"
import Card from "./Card.astro"
import { getImage } from "astro:assets"
export type clientBlogEntries = typeof blogEntriesFormatted

/**
 * A component that show all blog entries and where users can search by typing keywords.
 * Only made with Astro and vanilla JS. Could have done this with React or an already made
 * library ? Maybe...But would I've had as much fun? ðŸ¤·
 */

// get all blogEntries
const blogEntriesRaw: CollectionEntry<"blog">[] = await getCollection("blog", ({ data }) => {
	return isEntryPublished(data.published, true)
})

// Sort blog entries by date.
const blogEntries = blogEntriesRaw.sort((a, b) => b.data.date.getTime() - a.data.date.getTime())

// Get optimized images for every blog Cards
// This is needed to use the same image for SSR and CSR Cards
const images = await Promise.all(
	blogEntries.map(async ({ id, data }) => ({
		id,
		src: data.image
			? (await getImage({ src: data.image, height: 400, quality: 80, format: "webp" })).src
			: "",
	}))
)
// Dark version
const imagesDark = await Promise.all(
	blogEntries.map(async ({ id, data }) => ({
		id,
		src: data.image_dark
			? (await getImage({ src: data.image_dark, height: 400, quality: 80, format: "webp" })).src
			: "",
	}))
)

// Format blog entries to be used in the search script (client side)
// Reduce the amount of data sent to the client as much as possible
const blogEntriesFormatted = blogEntries.map(({ id, data }) => ({
	id,
	title: data.title,
	date: formatDate(data.date),
	tags: data.tags,
	abstract: data.abstract,
	image: images.find((image) => image.id === id),
	imageDark: imagesDark.find((image) => image.id === id),
	image_alt: data.image_alt,
}))
---

<>
	<div class="flex items-baseline gap-5">
		<h2 class="shrink-0" id="last_entries">Blog entries</h2>
		<div class="mb-5 ml-auto text-xs sm:text-sm">
			<input
				id="search"
				class="peer overflow-hidden truncate whitespace-nowrap border-b-[0.1rem] border-dotted bg-body-light outline-none placeholder:truncate focus:text-primary dark:bg-body-dark"
				placeholder="Search by title or keywords..."
				type="text"
			/>
			<i class="fas fa-search ml-1.5 peer-focus:text-primary"></i>
		</div>
	</div>
</>
<!-- By default, output display all blog entries -->
<div id="output" class="flex flex-col gap-2.5">
	{
		blogEntries.map((result) => (
			<Card entry={result} image={images.find((image) => image.id === result.id)?.src} />
		))
	}
</div>

<div data-blog={JSON.stringify(blogEntriesFormatted)}></div>
<script>
	import { Card } from "./Card.js"
	import type { clientBlogEntries } from "./Search.astro"
	/**
	 * Use a JS vanilla component because Astro component should only be use SSG (cause ViteJS)
	 * This SearchCard will be used to display search's results, see ->
	 * src/components/SearchCard.js
	 */
	customElements.define("search-card", Card)
	// Okay, here we go ðŸ§™
	// get the HTML elements on which we will interact
	const blogData = document.querySelector("[data-blog]")?.getAttribute("data-blog")
	const blogEntries: clientBlogEntries = blogData ? JSON.parse(blogData) : []
	const input = document.getElementById("search")
	const output = document.getElementById("output")
	if (!input || !output || blogEntries.length === 0) {
		throw new Error("Search component is missing input/output elements.")
	}
	// create a search object, that will be used to store the search results
	const search = {
		_results: blogEntries,
		get results() {
			return this._results
		},
		set results(value) {
			this._results = value
			applyInput()
		},
	}
	/**
	 * Update UI with search results
	 */
	const applyInput = () => {
		let fragment = document.createDocumentFragment()
		search.results.forEach((result) => {
			// For every result, insert a SearchCard in the output
			const searchCard = document.createElement("search-card")
			searchCard.setAttribute("title", result.title)
			searchCard.setAttribute("id", result.id)
			searchCard.setAttribute("date", result.date)
			searchCard.setAttribute("tags", result.tags.length > 0 ? result.tags.join(", ") : "No tags")
			searchCard.setAttribute("abstract", result.abstract)
			searchCard.setAttribute("image", result.image ? result.image.src : "")
			searchCard.setAttribute("imageDark", result.imageDark ? result.imageDark.src : "")
			searchCard.setAttribute("imageAlt", result.image_alt)
			fragment.append(searchCard)
		})
		output.append(fragment)
	}
	// On the first page load, remove the SSR content and display every blog entries
	output.innerHTML = ""
	search.results = blogEntries
	// add an event listener on input, to call applyInput/2 at each search
	input.addEventListener("input", (event) => {
		output.innerHTML = ""
		if (event.target) {
			const element = event.currentTarget
			if (element instanceof HTMLInputElement) {
				const searchKeywords = element.value.toLowerCase().split(" ")
				if (searchKeywords.length > 0) {
					// Filter block entries based on their title, abstract & tags
					// should match every keywords provided by search input !
					search.results = blogEntries.filter((entry) =>
						searchKeywords.every(
							(keyword) =>
								entry.title.toLowerCase().includes(keyword) ||
								entry.abstract.toLowerCase().includes(keyword) ||
								entry.tags.some((tag: string) => tag.toLowerCase().includes(keyword))
						)
					)
				} else {
					// if no keywords, return every blog entries
					search.results = blogEntries
				}
			}
		}
	})
	// that should do it ðŸ§™
</script>
