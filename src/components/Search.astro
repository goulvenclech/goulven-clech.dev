---
import { getCollection, type CollectionEntry } from "astro:content"
import { getImage } from "astro:assets"
import type { ImageMetadata } from "astro"
import { formatDate, isEntryPublished } from "src/utils"
import { generatePlaceholder } from "src/imageService"
import type { BlogEntry } from "src/utils"
import Block from "./blocks/Block.astro"
export type ClientBlogEntries = BlogEntry[]

/**
 * A component that show all blog entries and where users can search by typing keywords.
 * Or filter by tags and years.
 * Only made with Astro and vanilla JS. Could have done this with React or an already made
 * library ? Maybe...But would I've had as much fun? ü§∑
 */

// Get all published blog entries
const blogEntriesRaw: CollectionEntry<"blog">[] = await getCollection("blog", ({ data }) => {
	return isEntryPublished(data.published)
})

// Sort blog entries by date
const blogEntries = blogEntriesRaw.sort((a, b) => b.data.date.getTime() - a.data.date.getTime())

const CARD_IMAGE_MAX_WIDTH = 960
const CARD_IMAGE_QUALITY = 80

type EntryImage = ImageMetadata | string | undefined

async function collectCardImageData(
	entryImage: EntryImage,
	id: string,
	variant: "light" | "dark"
): Promise<{ placeholder: string; optimizedSrc?: string }> {
	let placeholder = ""
	let optimizedSrc: string | undefined

	if (!entryImage) {
		return { placeholder, optimizedSrc }
	}

	if (typeof entryImage === "string") {
		optimizedSrc = entryImage
		return { placeholder, optimizedSrc }
	}

	if (entryImage.format === "svg") {
		optimizedSrc = entryImage.src
		return { placeholder, optimizedSrc }
	}

	try {
		// Try to use fsPath from raw image, fallback to checking various properties
		const imageWithPath = entryImage as any
		const fsPath = imageWithPath.fsPath || imageWithPath.filepath || imageWithPath.file?.fsPath
		if (fsPath && typeof fsPath === "string") {
			placeholder = await generatePlaceholder(
				fsPath,
				Math.max(entryImage.width, 600),
				entryImage.height
			)
		}
	} catch (error) {
		console.warn(`Failed to generate placeholder for ${variant} image in ${id}:`, error)
	}

	optimizedSrc = entryImage.src
	try {
		const targetWidth = Math.min(entryImage.width, CARD_IMAGE_MAX_WIDTH)
		const targetFormat = entryImage.format === "gif" ? "gif" : "webp"
		const optimized = await getImage({
			src: entryImage,
			width: targetWidth,
			format: targetFormat,
			...(targetFormat === "gif" ? {} : { quality: CARD_IMAGE_QUALITY }),
		})
		optimizedSrc = optimized.src
	} catch (error) {
		console.warn(`Failed to optimize ${variant} image in ${id}:`, error)
	}

	return { placeholder, optimizedSrc }
}

const imageAssets = await Promise.all(
	blogEntries.map(async ({ id, data }) => {
		const { placeholder, optimizedSrc } = await collectCardImageData(data.image, id, "light")
		return { id, placeholder, optimizedSrc }
	})
)

const imageDarkAssets = await Promise.all(
	blogEntries.map(async ({ id, data }) => {
		const { placeholder, optimizedSrc } = await collectCardImageData(
			data.image_dark,
			id,
			"dark"
		)
		return { id, placeholder, optimizedSrc }
	})
)

const imageAssetMap = new Map(imageAssets.map((asset) => [asset.id, asset]))
const imageDarkAssetMap = new Map(imageDarkAssets.map((asset) => [asset.id, asset]))

// Extract all tags and years for filter options
const allTags = new Set<string>()
const allYears = new Set<number>()

blogEntries.forEach(({ data }) => {
	data.tags.forEach((tag) => allTags.add(tag))
	allYears.add(data.date.getFullYear())
})

const sortedYears = [...allYears].sort((a, b) => b - a)

// Important tags based on your blog content
const importantTags = [
	{ value: "web development", label: "üíª Web Development" },
	{ value: "game development", label: "üéÆ Game Development" },
	{ value: "coffee", label: "‚òïÔ∏è Speciality Coffee" },
]

// Format blog entries for client-side filtering
// Reduce the amount of data sent to the client as much as possible
const blogEntriesFormatted: ClientBlogEntries = blogEntries.map(({ id, data }) => {
	const lightAssets = imageAssetMap.get(id)
	const darkAssets = imageDarkAssetMap.get(id)

	return {
		id,
		title: data.title,
		date: formatDate(data.date),
		year: data.date.getFullYear(),
		tags: data.tags,
		abstract: data.abstract,
		image: lightAssets?.optimizedSrc ? { src: lightAssets.optimizedSrc } : undefined,
		imageDark: darkAssets?.optimizedSrc ? { src: darkAssets.optimizedSrc } : undefined,
		imagePlaceholder: lightAssets?.placeholder,
		imageDarkPlaceholder: darkAssets?.placeholder,
		imageAlt: data.imageAlt,
		isPublished: isEntryPublished(data.published, true),
		imageFocusY: typeof data.cardImageFocusY === "number" ? data.cardImageFocusY : undefined,
	}
})
---

<form class="mb-5 grid grid-cols-2 gap-5 text-xs sm:text-sm">
	<div class="group col-span-2 flex items-center">
		<i class="fas fa-search group-has-focus:text-primary mr-1.5"></i>
		<input
			id="search-query"
			class="focus:text-primary w-full truncate overflow-hidden border-b-[0.1rem] border-dotted whitespace-nowrap outline-hidden placeholder:truncate"
			placeholder="Search blog entries by title or keywords..."
			type="text"
		/>
	</div>

	<select id="tag-filter" class="border-b-[0.1rem] border-dotted">
		<option value="" selected>üè∑Ô∏è All topics</option>
		{importantTags.map((tag) => <option value={tag.value}>{tag.label}</option>)}
	</select>

	<select id="year-filter" class="border-b-[0.1rem] border-dotted">
		<option value="" selected>üóÇÔ∏è All years</option>
		{sortedYears.map((year) => <option value={year.toString()}>üìÅ {year}</option>)}
	</select>
</form>

<div id="output" class="flex flex-col gap-2.5">
	{
		/* Default SSR output */
		blogEntries.slice(0, 5).map((result) => (
			<Block
				image={result.data.image}
				imageDark={result.data.image_dark}
				to={`/${result.id}`}
				imageFocusY={result.data.cardImageFocusY}
			>
				<h3>{result.data.title}</h3>
				<p class="line-clamp-4 text-ellipsis sm:line-clamp-3">
					<span set:html={result.data.abstract} /> ‚Äî
					<span class="whitespace-nowrap"> {formatDate(result.data.date)}</span>
				</p>
			</Block>
		))
	}
</div>
<button
	id="load-more"
	class={`button mt-0 ${blogEntries.length <= 5 ? "hidden" : ""}`}
	type="button"
>
	Load more
</button>

<div data-blog={JSON.stringify(blogEntriesFormatted)}></div>
<script>
	import { Card } from "./card/Card.ts"
	import { EmptyState } from "./card/EmptyState.ts"
	import type { ClientBlogEntries } from "./Search.astro"
	import type { BlogEntry } from "src/utils"

	interface FilterState {
		query: string
		tag: string
		year: string
		sort: "date"
	}

	const PAGE_SIZE = 5
	let currentOffset = 0

	/**
	 * Enhanced blog search with filtering capabilities
	 * Supports search queries, tag filtering, year filtering, and sorting
	 */
	function filterBlogEntries(entries: BlogEntry[], filters: FilterState): BlogEntry[] {
		return entries.filter((entry) => {
			// Filter by search query
			if (filters.query) {
				const searchKeywords = filters.query.toLowerCase().split(" ")
				const matchesQuery = searchKeywords.every(
					(keyword) =>
						entry.title.toLowerCase().includes(keyword) ||
						entry.abstract.toLowerCase().includes(keyword) ||
						entry.tags.some((tag) => tag.toLowerCase().includes(keyword))
				)
				if (!matchesQuery) return false
			}

			// Filter by tag
			if (filters.tag) {
				const hasTag = entry.tags.some((tag) => tag.toLowerCase() === filters.tag.toLowerCase())
				if (!hasTag) return false
			}

			// Filter by year
			if (filters.year) {
				if (entry.year !== parseInt(filters.year)) return false
			}

			return true
		})
	}

	// Sort blog entries by date (newest first)
	export function sortBlogEntries(entries: BlogEntry[]): BlogEntry[] {
		const sorted = [...entries]

		// Always sort by date (newest first)
		return sorted.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
	}

	// Okay, here we go üßô
	// Get blog data and DOM elements
	const blogData = document.querySelector("[data-blog]")?.getAttribute("data-blog")
	const blogEntries: ClientBlogEntries = blogData ? JSON.parse(blogData) : []

	const queryInput = document.getElementById("search-query") as HTMLInputElement
	const tagFilter = document.getElementById("tag-filter") as HTMLSelectElement
	const yearFilter = document.getElementById("year-filter") as HTMLSelectElement
	const output = document.getElementById("output")

	if (!queryInput || !tagFilter || !yearFilter || !output || blogEntries.length === 0) {
		throw new Error("Search component is missing required elements.")
	}

	// Sync filter state to URL
	function updateUrl(filters: FilterState) {
		const params = new URLSearchParams()
		if (filters.query) params.set("query", filters.query)
		if (filters.tag) params.set("tag", filters.tag)
		if (filters.year) params.set("year", filters.year)

		history.replaceState(null, "", `${location.pathname}${params.toString() ? "?" + params : ""}`)
	}

	// Get current filter values
	function getFilterState(): FilterState {
		return {
			query: queryInput.value.trim(),
			tag: tagFilter.value,
			year: yearFilter.value,
			sort: "date",
		}
	}

	// Apply filters and update UI
	function applyFilters(append = false) {
		const filters = getFilterState()
		updateUrl(filters)

		let filteredEntries = filterBlogEntries(blogEntries, filters)
		filteredEntries = sortBlogEntries(filteredEntries)

		const totalResults = filteredEntries.length
		const displayedEntries = filteredEntries.slice(0, currentOffset + PAGE_SIZE)
		const hasMoreResults = totalResults > displayedEntries.length

		if (!append) {
			// Clear existing results for new search
			output!.innerHTML = ""
		}

		// Show empty state if no results
		if (filteredEntries.length === 0) {
			const emptyState = new EmptyState().setMessage("No entries found...")
			output!.appendChild(emptyState)
			const loadMoreButton = document.getElementById("load-more")
			if (loadMoreButton) loadMoreButton.classList.add("hidden")
			return
		}

		// Create document fragment for performance
		const fragment = document.createDocumentFragment()

		const entriesToAdd = append
			? filteredEntries.slice(currentOffset, currentOffset + PAGE_SIZE)
			: displayedEntries

		entriesToAdd.forEach((entry) => {
			const searchCard = new Card().fromBlogEntry(entry)
			fragment.appendChild(searchCard)
		})

		output!.appendChild(fragment)

		// Show or hide the load more button
		const loadMoreButton = document.getElementById("load-more")
		if (loadMoreButton) {
			loadMoreButton.classList.toggle("hidden", !hasMoreResults)
		}
	}

	// Initialize filters from URL
	function initializeFromUrl() {
		const params = new URLSearchParams(location.search)
		const query = params.get("query") || ""
		const tag = params.get("tag") || ""
		const year = params.get("year") || ""

		queryInput.value = query
		tagFilter.value = tag
		yearFilter.value = year

		currentOffset = 0
		applyFilters()
	}

	// Add event listeners
	let debounceTimer: number
	queryInput.addEventListener("input", () => {
		clearTimeout(debounceTimer)
		debounceTimer = window.setTimeout(() => {
			currentOffset = 0
			applyFilters()
		}, 300)
	})

	tagFilter.addEventListener("change", () => {
		currentOffset = 0
		applyFilters()
	})

	yearFilter.addEventListener("change", () => {
		currentOffset = 0
		applyFilters()
	})

	// Load more button
	document.getElementById("load-more")?.addEventListener("click", () => {
		currentOffset += PAGE_SIZE
		applyFilters(true)
	})

	// Initialize on page load
	document.addEventListener("DOMContentLoaded", () => {
		currentOffset = 0
		initializeFromUrl()
	})
	// that should do it üßô
</script>
