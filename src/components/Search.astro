---
import { getCollection, type CollectionEntry } from "astro:content"
import { formatDate, isEntryPublished } from "src/utils"
import Card from "./card/Card.astro"
import { getImage } from "astro:assets"
import type { BlogEntry } from "src/utils"
export type ClientBlogEntries = BlogEntry[]

/**
 * A component that show all blog entries and where users can search by typing keywords.
 * Or filter by tags and years.
 * Only made with Astro and vanilla JS. Could have done this with React or an already made
 * library ? Maybe...But would I've had as much fun? 🤷
 */

// Get all published blog entries
const blogEntriesRaw: CollectionEntry<"blog">[] = await getCollection("blog", ({ data }) => {
	return isEntryPublished(data.published)
})

// Sort blog entries by date
const blogEntries = blogEntriesRaw.sort((a, b) => b.data.date.getTime() - a.data.date.getTime())

// Get optimized images for every blog card
// This is needed to use the same image for SSR and CSR Cards
const images = await Promise.all(
	blogEntries.map(async ({ id, data }) => ({
		id,
		src: data.image
			? (await getImage({ src: data.image, height: 400, quality: 80, format: "webp" })).src
			: "",
	}))
)

// Dark version
const imagesDark = await Promise.all(
	blogEntries.map(async ({ id, data }) => ({
		id,
		src: data.image_dark
			? (await getImage({ src: data.image_dark, height: 400, quality: 80, format: "webp" })).src
			: "",
	}))
)

// Extract all tags and years for filter options
const allTags = new Set<string>()
const allYears = new Set<number>()

blogEntries.forEach(({ data }) => {
	data.tags.forEach((tag) => allTags.add(tag))
	allYears.add(data.date.getFullYear())
})

const sortedYears = [...allYears].sort((a, b) => b - a)

// Important tags based on your blog content
const importantTags = [
	{ value: "web development", label: "💻 Web Development" },
	{ value: "game development", label: "🎮 Game Development" },
	{ value: "coffee", label: "☕️ Speciality Coffee" },
]

// Format blog entries for client-side filtering
// Reduce the amount of data sent to the client as much as possible
const blogEntriesFormatted: ClientBlogEntries = blogEntries.map(({ id, data }) => ({
	id,
	title: data.title,
	date: formatDate(data.date),
	year: data.date.getFullYear(),
	tags: data.tags,
	abstract: data.abstract,
	image: images.find((image) => image.id === id),
	imageDark: imagesDark.find((image) => image.id === id),
	imageAlt: data.imageAlt,
	isPublished: isEntryPublished(data.published, true),
}))
---

<form class="mb-5 grid grid-cols-2 gap-5 text-xs sm:text-sm">
	<div class="group col-span-2 flex items-center">
		<i class="fas fa-search group-has-focus:text-primary mr-1.5"></i>
		<input
			id="search-query"
			class="focus:text-primary w-full truncate overflow-hidden border-b-[0.1rem] border-dotted whitespace-nowrap outline-hidden placeholder:truncate"
			placeholder="Search blog entries by title or keywords..."
			type="text"
		/>
	</div>

	<select id="tag-filter" class="border-b-[0.1rem] border-dotted">
		<option value="" selected>🏷️ All topics</option>
		{importantTags.map((tag) => <option value={tag.value}>{tag.label}</option>)}
	</select>

	<select id="year-filter" class="border-b-[0.1rem] border-dotted">
		<option value="" selected>🗂️ All years</option>
		{sortedYears.map((year) => <option value={year.toString()}>📁 {year}</option>)}
	</select>
</form>

<div id="output" class="flex flex-col gap-2.5">
	{
		/* Default SSR output */
		blogEntries.map((result) => (
			<Card entry={result} image={images.find((image) => image.id === result.id)?.src} />
		))
	}
</div>

<div data-blog={JSON.stringify(blogEntriesFormatted)}></div>
<script>
	import { Card } from "./card/Card.ts"
	import { EmptyState } from "./card/EmptyState.ts"
	import type { ClientBlogEntries } from "./Search.astro"
	import type { BlogEntry } from "src/utils"

	interface FilterState {
		query: string
		tag: string
		year: string
		sort: "date"
	}

	/**
	 * Enhanced blog search with filtering capabilities
	 * Supports search queries, tag filtering, year filtering, and sorting
	 */
	function filterBlogEntries(entries: BlogEntry[], filters: FilterState): BlogEntry[] {
		return entries.filter((entry) => {
			// Filter by search query
			if (filters.query) {
				const searchKeywords = filters.query.toLowerCase().split(" ")
				const matchesQuery = searchKeywords.every(
					(keyword) =>
						entry.title.toLowerCase().includes(keyword) ||
						entry.abstract.toLowerCase().includes(keyword) ||
						entry.tags.some((tag) => tag.toLowerCase().includes(keyword))
				)
				if (!matchesQuery) return false
			}

			// Filter by tag
			if (filters.tag) {
				const hasTag = entry.tags.some((tag) => tag.toLowerCase() === filters.tag.toLowerCase())
				if (!hasTag) return false
			}

			// Filter by year
			if (filters.year) {
				if (entry.year !== parseInt(filters.year)) return false
			}

			return true
		})
	}

	// Sort blog entries by date (newest first)
	export function sortBlogEntries(entries: BlogEntry[]): BlogEntry[] {
		const sorted = [...entries]

		// Always sort by date (newest first)
		return sorted.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
	}

	// Okay, here we go 🧙
	// Get blog data and DOM elements
	const blogData = document.querySelector("[data-blog]")?.getAttribute("data-blog")
	const blogEntries: ClientBlogEntries = blogData ? JSON.parse(blogData) : []

	const queryInput = document.getElementById("search-query") as HTMLInputElement
	const tagFilter = document.getElementById("tag-filter") as HTMLSelectElement
	const yearFilter = document.getElementById("year-filter") as HTMLSelectElement
	const output = document.getElementById("output")

	if (!queryInput || !tagFilter || !yearFilter || !output || blogEntries.length === 0) {
		throw new Error("Search component is missing required elements.")
	}

	// Sync filter state to URL
	function updateUrl(filters: FilterState) {
		const params = new URLSearchParams()
		if (filters.query) params.set("query", filters.query)
		if (filters.tag) params.set("tag", filters.tag)
		if (filters.year) params.set("year", filters.year)

		history.replaceState(null, "", `${location.pathname}${params.toString() ? "?" + params : ""}`)
	}

	// Get current filter values
	function getFilterState(): FilterState {
		return {
			query: queryInput.value.trim(),
			tag: tagFilter.value,
			year: yearFilter.value,
			sort: "date",
		}
	}

	// Apply filters and update UI
	function applyFilters() {
		const filters = getFilterState()
		updateUrl(filters)

		let filteredEntries = filterBlogEntries(blogEntries, filters)
		filteredEntries = sortBlogEntries(filteredEntries)

		// Clear existing results
		output!.innerHTML = ""

		// Show empty state if no results
		if (filteredEntries.length === 0) {
			const emptyState = new EmptyState().setMessage("No entries found...")
			output!.appendChild(emptyState)
			return
		}

		// Create document fragment for performance
		const fragment = document.createDocumentFragment()

		filteredEntries.forEach((entry) => {
			const searchCard = new Card().fromBlogEntry(entry)
			fragment.appendChild(searchCard)
		})

		output!.appendChild(fragment)
	}

	// Initialize filters from URL
	function initializeFromUrl() {
		const params = new URLSearchParams(location.search)
		const query = params.get("query") || ""
		const tag = params.get("tag") || ""
		const year = params.get("year") || ""

		queryInput.value = query
		tagFilter.value = tag
		yearFilter.value = year

		applyFilters()
	}

	// Add event listeners
	let debounceTimer: number
	queryInput.addEventListener("input", () => {
		clearTimeout(debounceTimer)
		debounceTimer = window.setTimeout(() => {
			applyFilters()
		}, 300)
	})

	tagFilter.addEventListener("change", applyFilters)
	yearFilter.addEventListener("change", applyFilters)

	// Initialize on page load
	document.addEventListener("DOMContentLoaded", () => {
		initializeFromUrl()
	})
	// that should do it 🧙
</script>
